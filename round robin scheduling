#include <stdio.h>

#define MAX_PROCESSES 10

typedef struct {
    int pid; // Process ID
    int burst_time; // Burst time
    int remaining_time; // Remaining time for execution
} Process;

void round_robin(Process processes[], int n, int time_quantum) {
    int remaining_processes = n;
    int current_time = 0;
    int completed[MAX_PROCESSES] = {0};

    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (completed[i]) // Skip completed processes
                continue;

            if (processes[i].remaining_time > 0) {
                // Execute the process for the time quantum or its remaining time, whichever is smaller
                int execution_time = (processes[i].remaining_time > time_quantum) ? time_quantum : processes[i].remaining_time;
                processes[i].remaining_time -= execution_time;
                current_time += execution_time;

                printf("Process %d executes for %d units of time.\n", processes[i].pid, execution_time);

                if (processes[i].remaining_time == 0) {
                    remaining_processes--;
                    completed[i] = 1;
                    printf("Process %d completed at time %d.\n", processes[i].pid, current_time);
                }
            }
        }
    }
}

int main() {
    int n, time_quantum;
    Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    printf("Enter the time quantum: ");
    scanf("%d", &time_quantum);

    round_robin(processes, n, time_quantum);

    return 0;
}
