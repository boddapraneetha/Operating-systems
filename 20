#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define MAX_READERS 5

sem_t mutex, writeblock;
int data = 0, readers_count = 0;

void *reader(void *arg) {
    int reader_id = *((int *)arg);
    printf("Reader %d is trying to read...\n", reader_id);
    sem_wait(&mutex);
    readers_count++;
    if (readers_count == 1) {
        sem_wait(&writeblock);
    }
    sem_post(&mutex);
    printf("Reader %d is reading. Data read: %d\n", reader_id, data);
    sem_wait(&mutex);
    readers_count--;
    if (readers_count == 0) {
        sem_post(&writeblock);
    }
    sem_post(&mutex);
    printf("Reader %d finished reading.\n", reader_id);
}

void *writer(void *arg) {
    int writer_id = *((int *)arg);
    printf("Writer %d is trying to write...\n", writer_id);
    sem_wait(&writeblock);
    data++;
    printf("Writer %d has written. Data written: %d\n", writer_id, data);
    sem_post(&writeblock);
    printf("Writer %d finished writing.\n", writer_id);
}

int main() {
    pthread_t readers[MAX_READERS], writer_thread;
    int reader_ids[MAX_READERS], writer_id;
    
    sem_init(&mutex, 0, 1);
    sem_init(&writeblock, 0, 1);
    
    // Create reader threads
    for (int i = 0; i < MAX_READERS; i++) {
        reader_ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }

    // Create writer thread
    writer_id = 1;
    pthread_create(&writer_thread, NULL, writer, &writer_id);

    // Join threads
    for (int i = 0; i < MAX_READERS; i++) {
        pthread_join(readers[i], NULL);
    }
    pthread_join(writer_thread, NULL);
    
    sem_destroy(&mutex);
    sem_destroy(&writeblock);
    
    return 0;
}
